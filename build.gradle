def getDependencies(config) {
    return config.getAllDependencies().collect {
        def res = it.group + ':' + it.name + ':' + it.version
        if(!it.excludeRules.isEmpty()) {
            res += "(" + it.excludeRules.collect { it.group + ':' + it.module }.join(',') + ")"
        }
        return res
    }
}

allprojects {
    group               = 'co.paralleluniverse.comsat.bench.http.server'
    version             = '0.1.0-SNAPSHOT'
    status              = 'integration'
    description         = 'HTTP Server Bench'

    apply plugin: 'maven'
    apply plugin: 'java'

    ext.classifier      = ':jdk8'
    sourceCompatibility = 1.8     // 1.7
    targetCompatibility = 1.8     // 1.7

    ext.quasarVer       = '0.7.4'
    ext.comsatVer       = '0.6.0'
    ext.capsuleVersion  = '1.0.2-SNAPSHOT'

//    ext.clojureVer      = '1.7.0'
//
//    ext.slf4jVer        = '1.7.13'
//    ext.log4jVer        = '1.2.17'
//    ext.jbenderVer      = '1.0.1-SNAPSHOT'
//
    ext.slf4jApiVer     = '1.7.13'
//    ext.httpCoreVer     = '4.4.1'
//    ext.httpClientVer   = '4.5'
//    ext.hdrVer          = '2.1.7'

    ext.jettyVer        = '9.3.6.v20151106'
    ext.tomcatVer       = '8.0.30'
    ext.undertowVer     = '1.3.15.Final'
    ext.nettyVer        = '4.0.34.Final'
    ext.sparkVer        = '2.3'

    ext.junitVer        = '4.12'

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    configurations {
        quasar
        capsule
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
            force "org.eclipse.jetty:jetty-util:$jettyVer"
            force "org.eclipse.jetty:jetty-io:$jettyVer"
            force "org.eclipse.jetty:jetty-http:$jettyVer"
            force "org.eclipse.jetty:jetty-server:$jettyVer"
            force "org.eclipse.jetty:jetty-servlet:$jettyVer"
            force "org.eclipse.jetty:jetty-webapp:$jettyVer"
            force "org.slf4j:slf4j-api:$slf4jApiVer"
//            force "org.apache.httpcomponents:httpcore:$httpCoreVer"
//            force "org.apache.httpcomponents:httpclient:$httpClientVer"
//            force "org.hdrhistogram:HdrHistogram:$hdrVer"
//            force "co.paralleluniverse:quasar-core:$quasarVer"
//
//            force "org.clojure:clojure:$clojureVer"
//            force "co.paralleluniverse:pulsar:$quasarVer"
//            force "org.clojure:tools.analyzer.jvm:0.3.0"
//            force "clojuresque:clojuresque-base:1.7.0"
//            force "de.kotka.gradle:gradle-utils:0.2.2"
//            force "org.clojure:core.cache:0.6.4"
//            force "riddley:riddley:0.1.9"
//            force "potemkin:potemkin:0.4.1"
//            force "commons-codec:commons-codec:1.10"
//            force "clj-tuple:clj-tuple:0.2.2"
//            force "com.google.guava:guava:19.0"
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    //    maven { url "https://oss.sonatype.org/content/repositories/releases" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    //    maven { url 'https://maven.java.net/content/repositories/snapshots' }
    }

    test {
        beforeTest { desc ->
            logger.quiet("Running test: " + desc)
        }

        afterTest { desc, result ->
            if(result.resultType == TestResult.ResultType.FAILURE) {
                logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
                if(result.exception != null) {
                    result.exception.printStackTrace()
                }
            }
        }
    }

    dependencies {
        compile "co.paralleluniverse:quasar-core:${quasarVer}${classifier}"

        capsule "co.paralleluniverse:capsule:$capsuleVersion"

        quasar "co.paralleluniverse:quasar-core:${quasarVer}${classifier}@jar"

        testCompile "junit:junit:$junitVer"
    }

    task fatCapsule(type: Jar, dependsOn: jar) {
        archiveName = "${project.name}-fatcap.jar"

        from jar // embed our application jar

        from { configurations.runtime } // embed dependencies

        from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' } // we just need the single Capsule class

        manifest {
            attributes (
                'Premain-Class'       : 'Capsule',
                'Main-Class'          : 'Capsule',
                'Application-Name'    : project.name,
                'Application-Version' : project.version,
                'Application-Class'   : 'Main',
                'JVM-Args'            : '-XX:+AggressiveOpts -XX:-UseGCOverheadLimit',
                'System-Properties'   : 'co.paralleluniverse.fibers.detectRunawayFibers=false', // 'co.paralleluniverse.fibers.verifyInstrumentation'
                'Java-Agents'         : getDependencies(configurations.quasar).iterator().next(),
                'Repositories'        : 'central https://oss.sonatype.org/content/repositories/snapshots'
            )
        }
    }

    defaultTasks 'fatCapsule'
}
